
// author: MNF - manolodeinternet@gmail.com
// qmk_issues_log.txt
// collects issues and its solutions while writing C code and compiling it in QMK firmware 
// for my DIY keyboards (gherkin, miniDactyl, ... )
//
// NOTE:
// please, be careful using an OS X layout, because we implement QMK layouts from scratch,
// then, we use simple and basic U.S. layout
// if we use `U.S.International - PC`, we'll get modifiers for Q(`), W(~), A('),
// instead of symbol characters for those keystrokes.
//

[FIXME]
// 🍎🍎🍎 
[#009]
  BULLETPROOF ACCENTED ACUTE FOR ALL   5   VOWELS AND N TILDE !!!

* modified files:  keyboards/40percentclub/gdherkin/keymaps/30_layout/keymap.c

    * IMPLEMENTING 150 ms keypress time for shift key(space),

    * A, I, O, U vowels implemented with implicit acute accent included,

        * As I need having tap_dance functions over KC_A, KC_U, KC_I and 
                tap_dance doesn’t get acute modifying character when shift is pressed,
                I have implemented acute modifying character with action_function,
                but over a new [ACUT] layer for not to overlapping previous tap_dance over A, U, I.
                And I access this new layer by pressing acute accent trigger (KC_V, KC_M),

        * It appeared a new problem when once in [ACUT] layer, I need KC_A for two
                functions again: ( á  |  Á ) and ( LSHIFT while acute accent trigger is pressed ).
                I have solved this issue, by implementing a new tap_dance for KC_A called
                A_AC_ON, who calls action_function directly with a NULL keyrecord_t parameter.
                This way, I can activate LSHIFT when hold, or call action_function directly
                 from the code (not from KEYMAP, as I believed that was the only way to call it).
                 It’s a solution, not too much elegant, but a solution.
                 A better solution it should be to rewrite tap_dance_function at process_tap_dance 
                 files at ‘qmk_firmware/quantum/process_keycode/process_tap_dance.h & .c’ 

* added files:  QMK POWER tricks,
    * where I’m going to collect all new power discoveries of C, QMK, algorithms, or whatever it brights by itself !
        * The first annotation is about how to manage what layer I am at present time, whenever I want to know it.

[#008]  
  BULLETPROOF ACCENTED ACUTE VOWELS !!!
  AT LAST, WHAT A RELIEF !!!

  It’s approached since low level coding, i.e.: modifying mods bits at QMK level of programming.  This was inspired from QMK documentation,

‘void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)’
and 
‘#define GRAVE_MODS  (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)|MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)|MOD_BIT(KC_LALT)|MOD_BIT(KC_RALT))’
at
‘https://docs.qmk.fm/#/keymap?id=action_function’

The issue with accented acute vowels was that acute modifier for vowels didn’t appear while shift key was pressed.  Instead of acute modifier for vowel, it appeared acute symbol followed by a space character, thus we couldn’t accentuate the vowel, it appeared the acute symbol and the vowel after it.

  Then, instead of use `bool process_record_user(uint16_t keycode, keyrecord_t *record) }`
we use now
`void action_function(keyrecord_t *record, uint8_t id, uint8_t opt) {`
and we modify mods bits directly, using
`mod_shift_enable = get_mods()&LSHIFT_MODS;`
`del_mods(mod_shift_enable);`
`add_mods(mod_shift_enable);`

  In ˜/qmk_firmware/tmk_core/common/action_code.h we have codification for mods at bit level.
/** \brief Key Actions
 *
 * Mod bits:    43210
 *   bit 0      ||||+- Control
 *   bit 1      |||+-- Shift
 *   bit 2      ||+--- Alt
 *   bit 3      |+---- Gui
 *   bit 4      +----- LR flag(Left:0, Right:1)
 */
enum mods_bit {
    MOD_LCTL = 0x01,
    MOD_LSFT = 0x02,
    MOD_LALT = 0x04,
    MOD_LGUI = 0x08,
    MOD_RCTL = 0x11,
    MOD_RSFT = 0x12,
    MOD_RALT = 0x14,
    MOD_RGUI = 0x18,
};


And by this way, we can press acute accent and get an acute modifier, even while shift key is pressed !!!

    * modified file:   keyboards/40percentclub/gdherkin/keymaps/30_layout/keymap.c,
                       for correct acute accent behaviour while shift key is pressed.

    * renamed file:    qmk_issues_log.txt into QMK_issues_log.txt,

    * modified file:   QMK_issues_log.txt
                       by adding the present acute accent issue committed in this commit

// 🍏🍏🍏 SOLVED - 
[fixme]

2019/02/23/S 15:00
// 🍎🍎🍎 BIG COMPILING ERROR WITHOUT ANY IMPORTANCE
If we get an error like the following:
******************************************************************************************************************************************************************************************
Compiling: keyboards/40percentclub/gherkin/keymaps/30_layout/keymap.c                              keyboards/40percentclub/gherkin/keymaps/30_layout/keymap.c: In function 'A_CAPS_reset':
keyboards/40percentclub/gherkin/keymaps/30_layout/keymap.c:1908:1: error: '__progmem__' attribute ignored [-Werror=attributes]
 const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
 ^~~~~
keyboards/40percentclub/gherkin/keymaps/30_layout/keymap.c:2121:1: error: '__progmem__' attribute ignored [-Werror=attributes]
 const uint16_t PROGMEM fn_actions[] = {
 ^~~~~
keyboards/40percentclub/gherkin/keymaps/30_layout/keymap.c:2376:1: error: expected declaration or statement at end of input
 }; // END OF THE PROGRAM  //
 ^
keyboards/40percentclub/gherkin/keymaps/30_layout/keymap.c:2121:24: error: unused variable 'fn_actions' [-Werror=unused-variable]
 const uint16_t PROGMEM fn_actions[] = {
                        ^~~~~~~~~~
keyboards/40percentclub/gherkin/keymaps/30_layout/keymap.c:1908:24: error: unused variable 'keymaps' [-Werror=unused-variable]
******************************************************************************************************************************************************************************************
it has been because we forgot to close a curly brace(from an if sentence) into a tap_dance_reset function.  And the code line of the error is a thousand after the missing '}'. That's all

2019/02/23/S 15:05
// 🍏🍏🍏 SOLVED - 

/////////////////////////////////////////////////////////////////////////////////////////

2019/02/18/M 8:15
// 🍎🍎🍎 ACUTE ACCENT DOESN'T WORK WHILE SHIFT KEY IS PRESSED
    Acute accent work properly alone and while capslock is pressed 
    (capslock is checked throug a flag -remember that capslock was implemented manually-
    and disabled before acute modifier is typed and enabled again after acute modifiers is typed).
    But if you had shift pressed, then we get acute symbol followed by a space, instead of acute modifier.
    This was implement with 
    'bool process_record_user(uint16_t keycode, keyrecord_t *record)'


2019/02/18/M 8:15
// 🍏🍏🍏 SOLVED - BULLETPROOF ACCENTED ACUTE VOWELS !!!
                    AT LAST, WHAT A RELIEF !!!

  It’s approached since low level coding, i.e.: modifying mods bits at QMK level of programming.  
  This was inspired from QMK documentation,

‘void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)’
and 
‘#define GRAVE_MODS  (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)|MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)|MOD_BIT(KC_LALT)|MOD_BIT(KC_RALT))’
at
‘https://docs.qmk.fm/#/keymap?id=action_function’

The issue with accented acute vowels was that acute modifier for vowels didn’t appear while shift key was pressed.  Instead of acute modifier for vowel, it appeared acute symbol followed by a space character, thus we couldn’t accentuate the vowel, it appeared the acute symbol and the vowel after it.

Then, instead of use `bool process_record_user(uint16_t keycode, keyrecord_t *record) }`
we use now
`void action_function(keyrecord_t *record, uint8_t id, uint8_t opt) {`
and we modify mods bits directly, using 
`mod_shift_enable = get_mods()&LSHIFT_MODS;`
`del_mods(mod_shift_enable);`
`add_mods(mod_shift_enable);`

And by this way, we can press acute accent and get an acute modifier, even while shift key is pressed !!!
}
/////////////////////////////////////////////////////////////////////////////////////////



// 2019/02/01/F 06:00
// 🍎🍎🍎 ABNORMAL KEYSTROKES BEHAVIOUR, MISSING KEYSTROKES {
   for avoid anormal behaviour of keystrokes, missing keystrokes, etc, 

[SYMB]:
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
  ⁉️     ~     ⁉️     _     %               \     (     )     *     /
   '     @     +     ⁉️     $               |     {     }     :    ⁉️
   !     ?     <     >      #               &     ⁉️    ⁉️    ,     .
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

[NMBR]:
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
  1     2     3     4     5               6     7     8     9     0
  ⎵    ⌦     0     =     $               -     4     5     6     +
  ⏎    ⁉️    ⁉️    ,     .               /     1     2     3     *
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯


// 2019/02/12/M 07:00
// 🍏🍏🍏 SOLVED - 
   FIRST WE DECLARE:
     enum tap_dance_states { // EACH ONE RECEIVE ITS VALUE...
       SINGLE_TAP           = 1,
       SINGLE_HOLD          = 2,
       ...

   SECOND WE DECLARE:
     enum tap_dance_keycodes { // IT BEGINS BY 0...
       Q_SUSR = 0  //        super user layer  // ... **TAB
      ,W_MOUS      //        mouse layer
      ...

   AND AT THE LAST ONE THAT WE DECLARE:
     enum custom_keycodes { // IT BEGINS AT A SAFE_RANGE... (this is the last enum)
       // MACROS for process_record_user()
       DICTAD = SAFE_RANGE
      ,BLIT_OFF
      ,BLIT_01  ,BLIT_02 ,BLIT_03 ,BLIT_04 ,BLIT_05
      ...

   tap_dance_states must be enumerated, all of them.
   And at the other hand, tap_dance_keycodes macros must begin by 0.
   And at the third other hand, SAFE_RANGE must be the initial value for the first custom macro keycode, for working with process_record_user().
}
/////////////////////////////////////////////////////////////////////////////////////////




// 2019/01/03/T 07:00
// 🍎🍎🍎 QMK compiling error - keymap_config_t {
  // I got this error while compiling from terminal:

  //
  Compiling: ./tmk_core/common/magic.c                                                               ./tmk_core/common/magic.c:15:1: error: unknown type name 'keymap_config_t'; did you mean 'debug_config_t'?
  keymap_config_t keymap_config;
  ^~~~~~~~~~~~~~~
  debug_config_t
  ./tmk_core/common/magic.c: In function 'magic'
  //
}

// 2019/01/03/T 07:30
// 🍏🍏🍏 SOLVED - QMK_KEYBOARD_H {
  // looking for keymap_config_t through my HDD using Spotlight,
  // all the files that used keymap_config_t had '#include QMK_KEYBOARD_H' at the very beginning
  The only necessary thing is writing the next line at the very beginning of 
  ˜/qmk_firmware/tmk_core/common/magic.c :

  #include QMK_KEYBOARD_H
}
/////////////////////////////////////////////////////////////////////////////////////////



// 2019/01/02/W 07:06
// 🍎🍎🍎 terminal error - git doesn't work {
  // I ran into this error trying to use git, after upgrading my mac OS from Sierra to Mojave (from any version to any higher version really).

  //
  ✅ qmk_firmware 🐳 :git status
  xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
  //
}

// 2019/01/02/W later
// 🍏🍏🍏 SOLVED - xcode-select -- install {
  // looking for this error in StackOverflow, I found this simple solution wich install command line again - but upgraded for the new mac OS

  //
  ✅ qmk_firmware 🐳 :xcode-select --install
  xcode-select: note: install requested for command line developer tools
  //
}
/////////////////////////////////////////////////////////////////////////////////////////



// 2019/01/04/F 21:59
// 🍎🍎🍎 QMK compiling error - undefined reference to: `tap_dance_actions`, `keymaps` {
	// I got this error while compiling from terminal:

	//
	...
	...
	...                                                                                                 [OK]
	Compiling: lib/lufa/LUFA/Drivers/USB/Core/USBTask.c                                                 [OK]
	Linking: .build/gherkin_comprehensive_gherkin.elf                                                   [ERRORS]
	 | 
	 | /usr/local/opt/avr-binutils/bin/avr-ld: .build/obj_gherkin_comprehensive_gherkin/quantum/process_keycode/process_tap_dance.o: in function `process_tap_dance_action_on_reset':
	 | /Users/navarro/qmk_firmware/quantum/process_keycode/process_tap_dance.c:107: undefined reference to `tap_dance_actions'
	 | /usr/local/opt/avr-binutils/bin/avr-ld: /Users/navarro/qmk_firmware/quantum/process_keycode/process_tap_dance.c:107: undefined reference to `tap_dance_actions'
	 | /usr/local/opt/avr-binutils/bin/avr-ld: /Users/navarro/qmk_firmware/quantum/process_keycode/process_tap_dance.c:107: undefined reference to `tap_dance_actions'
	 | /usr/local/opt/avr-binutils/bin/avr-ld: /Users/navarro/qmk_firmware/quantum/process_keycode/process_tap_dance.c:107: undefined reference to `tap_dance_actions'
	 | /usr/local/opt/avr-binutils/bin/avr-ld: /Users/navarro/qmk_firmware/quantum/process_keycode/process_tap_dance.c:108: undefined reference to `tap_dance_actions'
	 | /usr/local/opt/avr-binutils/bin/avr-ld: .build/obj_gherkin_comprehensive_gherkin/quantum/process_keycode/process_tap_dance.o:/Users/navarro/qmk_firmware/quantum/process_keycode/process_tap_dance.c:108: more undefined references to `tap_dance_actions' follow
	 | /usr/local/opt/avr-binutils/bin/avr-ld: .build/obj_gherkin_comprehensive_gherkin/quantum/keymap_common.o: in function `keymap_key_to_keycode':
	 | /Users/navarro/qmk_firmware/quantum/keymap_common.c:190: undefined reference to `keymaps'
	 | /usr/local/opt/avr-binutils/bin/avr-ld: /Users/navarro/qmk_firmware/quantum/keymap_common.c:190: undefined reference to `keymaps'
	 | collect2: error: ld returned 1 exit status
	 | 
	make[1]: *** [.build/gherkin_comprehensive_gherkin.elf] Error 1
	make: *** [gherkin:comprehensive_gherkin] Error 1
	Make finished with errors
	//
}

// 2019/01/04/F 08:00  while walking to work, thinking about it on the street
//                    (we can think fresher and better when we're far from computer)
// 🍏🍏🍏 SOLVED - keymap.c file needed {
	// I had on my QMK gherkin folder '/Users/navarro/qmk_firmware/keyboards/gherkin/keymaps/comprehensive_gherkin/' the C file named 'gherkin_from_scratch_keymap.c' and the 'make' command in 'make gherkin:comprehensive_gherkin:avrdude' was expecting for a 'keymap.c' named file.
	// then I renamed 'gherkin_from_scratch_keymap.c' into 'keymap.c' and That'sAllFolks!!!
	//
}
/////////////////////////////////////////////////////////////////////////////////////////



// 2019/01/09/W 06:11 This is not an issue.
// It's for checking what error appears when we remove `#include QMK_KEYBOARD_H` line from the code.
// 🍎🍎🍎 QMK compiling error - unknown type name `uint8_t`, `bool`, `qk_tap_dance_state_t`, `true`,... {
	Compiling: keyboards/gherkin/keymaps/comprehensive_gherkin/keymap.c                                keyboards/gherkin/keymaps/comprehensive_gherkin/keymap.c:155:4: error: unknown type name 'uint8_t'
    uint8_t caps_control_backlight = 0;
    ^~~~~~~
	keyboards/gherkin/keymaps/comprehensive_gherkin/keymap.c:156:4: error: unknown type name 'uint8_t'
	    uint8_t caps_disable_before_accent = 0;
	    ^~~~~~~
	keyboards/gherkin/keymaps/comprehensive_gherkin/keymap.c:158:4: error: unknown type name 'uint8_t'
	    uint8_t breathing_period = BREATHING_PERIOD;
	    ^~~~~~~
	keyboards/gherkin/keymaps/comprehensive_gherkin/keymap.c:159:4: error: unknown type name 'uint8_t'
	    uint8_t level_of_breathing_before = 0;
	    ^~~~~~~
	keyboards/gherkin/keymaps/comprehensive_gherkin/keymap.c:183:2: error: unknown type name 'bool'
	  bool is_press_action;
	  ^~~~
	keyboards/gherkin/keymaps/comprehensive_gherkin/keymap.c:187:16: error: unknown type name 'qk_tap_dance_state_t'
	 int cur_dance (qk_tap_dance_state_t *state) {
	                ^~~~~~~~~~~~~~~~~~~~
	keyboards/gherkin/keymaps/comprehensive_gherkin/keymap.c:228:22: error: 'true' undeclared here (not in a function)
	   .is_press_action = true,
	                      ^~~~
}

// 2019/01/09/W 06:11 instantly
// 🍏🍏🍏 SOLVED - QMK_KEYBOARD_H {
	// The only necessary thing is writing the next line at the very beginning of our `keymap.c` file

	   #include QMK_KEYBOARD_H
}
/////////////////////////////////////////////////////////////////////////////////////////



// 2019/01/02/W : 
// 🍎🍎🍎 QMK sintaxis - CAPSLOCK {
	// This is a long investigation about fixing/unfixing CAPSLOCK
		// 『🔵』『🔵』『🔵』『🔵』『🔵』『🔵』   KC_A  -  C A P S L O C K  -  KC_A  『🔵』『🔵』『🔵』『🔵』『🔵』『🔵』『🔵』『🔵』

	void capslock_finished_function(void) { // MY CAPSLOCK FINISHED FUNCTION
	  if (backlight_caps == 0)
	  {
	/*
	      register_code(KC_CAPS);
	      //SEND_STRING("\n1) ccb==0->subir brillo y ccb=1");
	      SEND_STRING("\n1");
	      SEND_STRING(") c");


	      SEND_STRING(SS_TAP(X_HOME));
	      send_string_keycodes()
	*/

	      //unregister_code(KC_LCAP);
	      SEND_STRING(SS_DOWN(X_CAPSLOCK));
	      register_code(KC_LCAP);



	      backlight_caps  = 1;
	      breathing_period_set(BR_CAPS);
	      breathing_enable();

	      /*
	      backlight_level_before_caps_look = get_backlight_level();
	      backlight_level(BL_CAPS);
	      */
	  }
	  else
	  {
	       //if (backlight_caps == 1)
	       //{
	/*
	         register_code(KC_CAPS);
	         //SEND_STRING("\n2) CCB==1->BAJAR BRILLO AL ANTERIOR Y CCB=0");
	         SEND_STRING("\n2");
	         SEND_STRING(") c");

	        SEND_STRING(SS_TAP(X_HOME));

	*/


	        //unregister_code(KC_LCAP);
	        SEND_STRING(SS_DOWN(X_CAPSLOCK));
	        register_code(KC_LCAP);



	         backlight_caps  = 0;
	         breathing_period_set(BR_DFLT);
	         breathing_disable();

	         /*
	         backlight_level(backlight_level_before_caps_look);
	         */
	       //}
	  }
	} // MY CAPSLOCK FINISHED FUNCTION

	void capslock_reset_function(void) {  // MY CAPSLOCK RESET FUNCTION
	  unregister_code(KC_CAPS); SEND_STRING(SS_UP(X_CAPSLOCK));
	}  // MY CAPSLOCK RESET FUNCTION



	void disable_capslock_before_accents_function(void) { // MY CAPSLOCK FINISHED FUNCTION

	  if (backlight_caps == 1)
	    {
	    //CAPS_LOCK tap
	      SEND_STRING(SS_DOWN(X_CAPSLOCK));  // press
	      register_code(KC_LCAP);            // press
	      unregister_code(KC_CAPS);          // release
	      SEND_STRING(SS_UP(X_CAPSLOCK));    // release
	      caps_disabled_before_accent = 1;
	    }
	} // MY DISABLE_CAPSLOCK_BEFORE_ACCENTS_FUNCTION

	void enable_capslock_after_accents_function(void) {  // MY CAPSLOCK RESET FUNCTION
	  if (caps_disabled_before_accent == 1)
	    {
	    //CAPS_LOCK tap
	      SEND_STRING(SS_DOWN(X_CAPSLOCK));  // press
	      register_code(KC_LCAP);            // press
	      unregister_code(KC_CAPS);          // release
	      SEND_STRING(SS_UP(X_CAPSLOCK));    // release
	      caps_disabled_before_accent = 0;
	  }
	} // MY ENABLE_CAPSLOCK_AFTER_ACCENTS_FUNCTION





	//instantalize an instance of 'tap' for the 'A_CAPS' tap dance.
	static tap A_CAPStap_state = {
	  .is_press_action = true,
	  .state = 0
	};

	void A_CAPS_finished (qk_tap_dance_state_t *state, void *user_data) {
	  A_CAPStap_state.state = cur_dance(state);
	  switch (A_CAPStap_state.state) {
	    case SINGLE_TAP:  register_code(KC_A); break;
	    case SINGLE_HOLD: register_code(KC_LSFT);
	                      //breathing_toggle();

	                      break;

	    case DOUBLE_TAP:        capslock_finished_function();  // MY CAPSLOCK FINISHED FUNCTION (the function defined just above)
	                            break;
	    case DOUBLE_HOLD:       register_code(KC_NO); break;
	    case DOUBLE_SINGLE_TAP: register_code(KC_A); unregister_code(KC_A);
	                            register_code(KC_A); break;

	    case TRIPLE_TAP:        register_code(KC_A); unregister_code(KC_A);
	                            register_code(KC_A); unregister_code(KC_A);
	                            register_code(KC_A); break;
	    case TRIPLE_HOLD:       register_code(KC_NO); break;
	    case TRIPLE_SINGLE_TAP: register_code(KC_A); unregister_code(KC_A);
	                            register_code(KC_A); unregister_code(KC_A);
	                            register_code(KC_A); break;

	  }
	}

	void A_CAPS_reset (qk_tap_dance_state_t *state, void *user_data) {
	  switch (A_CAPStap_state.state) {
	    case SINGLE_TAP:        unregister_code(KC_A); break;
	    case SINGLE_HOLD:       unregister_code(KC_LSFT); break;

	    case DOUBLE_TAP:        capslock_reset_function();  // MY CAPSLOCK RESET FUNCTION (the function defined just above)
	                            break;

	    case DOUBLE_HOLD:       unregister_code(KC_NO); break;
	    case DOUBLE_SINGLE_TAP: unregister_code(KC_A); break;
	  }
	  A_CAPStap_state.state = 0;
	}
	// 【🔴】【🔴】【🔴】【🔴】【🔴】【🔴】   KC_A  -  C A P S L O C K  -  KC_A  【🔴】【🔴】【🔴】【🔴】【🔴】【🔴】【🔴】【🔴】

} 

// 2019/01/09/W : This is a long investigation about fixing/unfixing CAPSLOCK
// 🍏🍏🍏 SOLVED - See code into this issue, just above
/////////////////////////////////////////////////////////////////////////////////////////



































