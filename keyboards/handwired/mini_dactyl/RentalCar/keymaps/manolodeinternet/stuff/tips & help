///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////// LINE TOO LONG !!!

/////////////////////////////////////////////////////////////// ### block ### of lines too long !!! ###

/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/
/* MAXIMUM LINE WIDTH FOR RIGHT PRINTING   (104  CHARACTERS)   MAXIMUM LINE WIDTH FOR RIGHT PRINTING */
/*XX  USING SUBLIMEPRINT  XXX  USING SUBLIMEPRINT  XX  USING SUBLIMEPRINT  XXX  USING SUBLIMEPRINT XX*/
/*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*/

// [MY_OWN_PREPROCESSING_KEYWORDS] for editing my code:
//
// [ADVICE]
// [advice]        maybe you can use this advice later, for covering a possible need
// 
// [BEAUTIFUL & CLEAN CODE]    you can do a task, just coding or...
//                             you can do the same thing making an artwork,
// [beautiful & clean code]    instead of a bunch of lines of code
//
// [BOOKMARK] 
//                 1) for looking for an important point of the code I'm editing,
// [bookmark]      2) for putting a bookmark into the code.
//
// [BUG?]
// [bug?]          can this code cause a bug ?        
//
// [DANGER]
// [danger]        for indicate that we have touch the code, without checking if the change is reliable
//
// [DATA]
// [data]          some information about any reference relative to our application data
//
// [DELETEME]      this bunch of code is no longer useful
// [deleteme]      we must delete it later
//
// [EXAMPLE]
// [example]
//
// [FIXME]
// [fixme]         there's something I HAVE TO FIX for a right working
//
// [IMPROVEME]
// [improveme]     there is something we could change for a smoothter working or a more elegant code
//
// [INFO]
// [info]          some information about any reference relative to our code or application analytics
//
// [INSPIRINGCODE]
// [inspiringcode] cool, clean, powerfull, funny snippet
//
// [LAST]
// [last]          for marking the point where I'm working
//
// [OLDWAY]        it works, but smells ...
//                 the ugly way I did this before that we aren't going to need any more.
// [oldway]        it still remains in the code as an example of how it don't have to do things again
//
// [OPTIONS]
// [options]       different ways of embracing or facing an algorith or any other issue
//
// [REFLEXION]
// [reflexion]     maybe things can be coded (thinked) different !!!
//
// [SAVING_SPACE]
// [saving_space]   ways of saving space for fitting the whole firmware into the microcontroller
//
// [SYSTEM PREFERENCES]
// [system preferences] sortcut defined in 'System Preferences'
//
// [TRANSLATION]
// [translation]
//
// [UNDERSTANDING] 
// [understanding] for giving explanations about what our code does
//
// [WHYWEDOTHIS]
// [whywedothis] explanation about why we do this thing
//
// [my_own_preprocessing_keywords]



///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
//          COMMENTS SYNTAX FOR IMPROVING LEGIBILITY OF THE DIFFERENT SECTIONS OF THE CODE           //
//                                                                                                   //
//                               STANDARDIZED HEADERS & FOOTERS                                      //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

// HEADER
///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// [TAPDANCE] [_layer_NAME] kc_KEYCODE (tapdance_NAME)                                               //
//                                                                                                   //
//  K E Y C O D E   /   L A Y E R _ X   /   F U N C T I O N   /   . . .                              //
//                                                                                                   //
//  KC_KEYCODE:  *  KEYCODE_1,                                                                       //
//              **  KEYCODE_2,                                                                       //
//               @ [_LAYER_X],                                                                       //
//              @@ [_LAYER_Y] OFF,                                                                   //
//             @@@ [_LAYER_Z],                                                                       //
//               ?  ETCETERA...                                                                      //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
// FOOTER
//                                                                                                   //
// [tapdance] [_layer_name] kc_keycode (tapdance_name)                                               //
//                                                                                                   //
//  k e y c o d e   /   l a y e r _ x   /   f u n c t i o n   /   . . .                              //
///////////////////////////////////////////////////////////////////////////////////////////////////////

// i.e.:
// HEADER
///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// [TAPDANCE] [_NUMB] KC_N (SLNUMB)                                                                  //
//                                                                                                   //
//  S L A S H  -  N U M B E R S   L A Y E R   O F F                                                  //
//                                                                                                   //
//  KC_N:  * KC_KP_SLASH = KC_PSLS,                                                                  //
//        @@ [_NUMB] OFF                                                                             //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
// FOOTER
//                                                                                                   //
// [tapdance] [_numb] kc_n (slnumb)                                                                  //
//                                                                                                   //
//  s l a s h  -  n u m b e r s   l a y e r   o f f                                                  //
///////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
//          comments syntax for improving legibility of the different sections of the code           //
//                                                                                                   //
//                               standardized headers & footers                                      //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

Custom Tapping Term

By default, the tapping term is defined globally, and is not configurable by key. For most users, this is perfectly fine. But in come cases, dual function keys would be greatly improved by different timeouts than LT keys, or because some keys may be easier to hold than others. Instead of using custom key codes for each, this allows for per key configurable TAPPING_TERM.

To enable this functionality, you need to add #define TAPPING_TERM_PER_KEY to your config.h, first.

Example get_tapping_term Implementation
To change the TAPPING TERM based on the keycode, you'd want to add something like the following to your keymap.c file:

uint16_t get_tapping_term(uint16_t keycode) {
  switch (keycode) {
    case SFT_T(KC_SPC):
      return TAPPING_TERM + 1250;
    case LT(1, KC_GRV):
      return 130;
    default:
      return TAPPING_TERM;
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
